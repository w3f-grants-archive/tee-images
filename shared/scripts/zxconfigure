#!/usr/bin/env bash
# This script prepares MACHINE-specific environment for Yocto builds

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $DIR/zxenv

if [ "$ZONDAX_CONF" == "dk2" ]; then
	echo "Building for STM32MP157F-DK2"
	MACHINE=stm32mp1
	FLASH_LAYOUT=optee/FlashLayout_sdcard_stm32mp157f-dk2-optee.tsv
	BSP_LAYERS=(meta-st-stm32mp meta-zondax-stm32mp)
elif [ "$ZONDAX_CONF" == "bytesatwork" ]; then
	echo "Error: Bytesatwork is not supported"
	exit 1
elif [ "$ZONDAX_CONF" == "imx8mq-evk" ]; then
	echo "Building for i.MX 8M EVK"
	MACHINE=imx8mq-evk
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "imx8mm-evk" ]; then
	echo "Building for i.MX 8M Mini EVK"
	MACHINE=imx8mm-lpddr4-evk
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "pico-pi-imx8mq" ]; then
	echo "Building for TechNexion PICO-PI-IMX8M"
	MACHINE=pico-pi-imx8mq
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "pico-wizard-imx8mq" ]; then
	echo "Building for TechNexion PICO-WIZARD-IMX8M"
	MACHINE=pico-wizard-imx8mq
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "pico-pi-imx8mm" ]; then
	echo "Building for TechNexion PICO-PI-IMX8M-MINI"
	MACHINE=pico-pi-imx8mm
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "pico-wizard-imx8mm" ]; then
	echo "Building for TechNexion PICO-WIZARD-IMX8M-MINI"
	MACHINE=pico-wizard-imx8mm
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "flex-pi-imx8mm" ]; then
	echo "Building for TechNexion FLEX-PI-IMX8M-MINI"
	MACHINE=flex-pi-imx8mm
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "flex-wizard-imx8mm" ]; then
	echo "Building for TechNexion FLEX-WIZARD-IMX8M-MINI"
	MACHINE=flex-wizard-imx8mm
	BSP_LAYERS=(meta-freescale meta-zondax-imx8)
elif [ "$ZONDAX_CONF" == "qemu8" ]; then
	echo "Building for QEMU ARMv8"
	MACHINE=qemu-optee64
	BSP_LAYERS=(meta-zondax-qemu)
elif [ "$ZONDAX_CONF" == "qemu" ]; then
	echo "Building for QEMU ARMv7"
	MACHINE=qemu-optee32
	BSP_LAYERS=(meta-zondax-qemu)
else
	echo "Unsupported platform $ZONDAX_CONF, exiting..."
	exit 1
fi

IMAGE_DIR="tmp/deploy/images/${MACHINE}"

function bsp_layers_current_add () {
	for i in "${BSP_LAYERS[@]}"; do bitbake-layers add-layer ${ROOT_DIR}/$i; done
}

function custom_layers_clean_all () {
	# clean cached bsp layer paths in bblayers.conf
	# we just remove one-by-one regardless if it's listed
	CUSTOM_LAYERS_FULL=(meta-zondax meta-zondax-qemu meta-zondax-stm32mp
			    meta-zondax-imx8 meta-st-stm32mp meta-freescale)
	for i in "${CUSTOM_LAYERS_FULL[@]}"; do bitbake-layers remove-layer ${ROOT_DIR}/$i; done
}

export MACHINE=$MACHINE
declare EULA_${MACHINE}=1

echo "-----------------------------------------------------------------------"
echo Adding all needed distro layers...
echo "-----------------------------------------------------------------------"

bitbake-layers add-layer ${ROOT_DIR}/meta-openembedded/meta-oe/
bitbake-layers add-layer ${ROOT_DIR}/meta-openembedded/meta-python/

echo "-----------------------------------------------------------------------"
echo Adding all needed BSP layers...
echo "-----------------------------------------------------------------------"
custom_layers_clean_all
bsp_layers_current_add

echo "-----------------------------------------------------------------------"
echo Adding Zondax meta layer...
echo "-----------------------------------------------------------------------"

bitbake-layers add-layer ${ROOT_DIR}/meta-zondax/
bitbake-layers show-layers

if [ "$ZONDAX_CONF" == "dk2" ]; then
	echo "-----------------------------------------------------------------------"
	echo Removing libdrm bbappend...
	echo "-----------------------------------------------------------------------"

	LIBDRM_BBAPPEND=libdrm_2.4.107.bbappend
	pushd ${ROOT_DIR}/meta-st-stm32mp/recipes-graphics/drm
	mv ${LIBDRM_BBAPPEND} ${LIBDRM_BBAPPEND}.bak || true
	popd
fi

echo "-----------------------------------------------------------------------"
echo Packages that going to be built:
echo "-----------------------------------------------------------------------"

bitbake -g core-image-minimal && cat pn-buildlist | grep -ve "native" | sort | uniq
